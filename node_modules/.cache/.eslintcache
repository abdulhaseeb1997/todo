[{"/Users/haseeb/Documents/ToDo App/src/index.js":"1","/Users/haseeb/Documents/ToDo App/src/App.js":"2","/Users/haseeb/Documents/ToDo App/src/reportWebVitals.js":"3","/Users/haseeb/Documents/ToDo App/src/Components/ToDo.js":"4"},{"size":535,"mtime":1654588264582,"results":"5","hashOfConfig":"6"},{"size":160,"mtime":1654594104717,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1654588264583,"results":"8","hashOfConfig":"6"},{"size":6732,"mtime":1654752652525,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wf9taj",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/haseeb/Documents/ToDo App/src/index.js",[],[],"/Users/haseeb/Documents/ToDo App/src/App.js",["24"],[],"import logo from './logo.svg';\nimport './App.css';\nimport ToDo from \"./Components/ToDo\";\n\nfunction App() {\n  return (\n      <ToDo/>\n  );\n}\n\nexport default App;\n","/Users/haseeb/Documents/ToDo App/src/reportWebVitals.js",[],[],"/Users/haseeb/Documents/ToDo App/src/Components/ToDo.js",["25","26","27","28"],[],"import React, { useState, useEffect, Component, } from 'react'\nimport styled from \"styled-components\"\nexport default function ToDo() {\n    const [tasks, setTasks] = useState([\n        {\n            id: 1,\n            title: \"Buy 1 kg Tomato\",\n        },\n        {\n            id: 2,\n            title: \"Buy 2 kg Onion\",\n        },\n        {\n            id: 3,\n            title: \"Visit Friend\",\n        },\n        {\n            id: 4,\n            title: \"Clean House\",\n        },\n    ]);\n    const [completed, setCompleted] = useState([\n        {\n            id: 5,\n            title: \"Washing Clothes\",\n        },\n        {\n            id: 6,\n            title: \"Play Cricket\",\n        },\n        {\n            id: 7,\n            title: \"1 Km Walking\",\n        },\n        {\n            id: 8,\n            title: \"Do HomeWork\",\n        },\n    ]);\n\n    const [newTask, setNewTask] = useState(\"\");\n    const [itemCount, setItemCount] = useState(0);\n\n    useEffect(() => {\n        setItemCount(completed.length + tasks.length);\n    }, []);\n\n    const deleteTask = (id) => {\n        let new_list = tasks.filter((task)=> task.id !== id);\n        setTasks(new_list);\n    }\n\n    const deleteCompleted = (id) => {\n        let new_list = completed.filter((task)=> task.id !== id);\n        setCompleted(new_list);\n    }\n\n    const completeTask = (id) => {\n        let current_task = tasks.find((task)=> task.id == id);\n        setCompleted([...completed,current_task]);\n\n        let new_list = tasks.filter((task)=> task.id !== id);\n        setTasks(new_list);\n    }\n\n    const revertTask = (id) => {\n        let current_task = completed.find((task)=> task.id == id);\n        setTasks([...tasks,current_task]);\n        \n        let new_list = completed.filter((task)=> task.id !== id);\n        setCompleted(new_list);\n    }\n    const renderTasks = () =>{\n        return tasks.map((task)=>(\n            <ListItem key={task.id}>\n                <LeftContainer onClick={()=>completeTask(task.id)}>\n                    <CheckContainer></CheckContainer>\n                    <ItemContent>{task.id}, {task.title}</ItemContent>\n                </LeftContainer>\n                <ItemRightContainer>\n                    <ActionButton onClick={()=>deleteTask(task.id)}>\n                        <ButtonImage src={require(\"./assets/delete.svg\").default} alt=\"Delete\"/>\n                    </ActionButton>\n                </ItemRightContainer>\n            </ListItem>\n        ));\n    };\n    const renderCompleted = () =>{\n        return completed.map((task)=>(\n            <ListItem key={task.id}>\n                <LeftContainer>\n                    <CheckContainerCompleted>\n                        <TickImage src={require('./assets/tick-green.svg').default} alt=\"Tick Image\"/>\n                    </CheckContainerCompleted>\n                    <ItemContentCompleted>{task.id}, {task.title}</ItemContentCompleted>\n                </LeftContainer>\n                <ItemRightContainer>\n                    <ActionButton onClick={()=>revertTask(task.id)}>\n                        <ButtonImage src={require(\"./assets/revert.svg\").default} alt=\"Revert\"/>\n                    </ActionButton>\n                    <ActionButton onClick={()=>deleteCompleted(task.id)}>\n                        <ButtonImage src={require(\"./assets/delete.svg\").default} alt=\"Delete\"/>\n                    </ActionButton>\n                </ItemRightContainer>\n            </ListItem>\n        ));\n    };\n    const addNewTask = (event) => {\n        event.preventDefault();\n\n        let new_task = {\n            id: itemCount + 1,\n            title: newTask,\n        }\n        setTasks([...tasks,new_task]);\n        setNewTask(\"\");\n        setItemCount((prev) => prev + 1);\n    };\n  return <Container>\n      <Heading> ToDo List </Heading>\n      <ToDoContainer>\n        <SubHeading>Things to be done</SubHeading>\n        <ToDoList>{renderTasks()}</ToDoList>\n      </ToDoContainer>\n      <NewToDoForm>\n          <FormInput  value={newTask} onChange={(e)=> setNewTask(e.target.value)} placeholder=\"Type New Task...\"/>\n          <FormSubmitButton onClick={(e)=>addNewTask(e)}>Add New Text</FormSubmitButton>\n      </NewToDoForm>\n      <ToDoContainer>\n        <SubHeading>Things to be done</SubHeading>\n        <ToDoList>{renderCompleted()}</ToDoList>\n      </ToDoContainer>\n  </Container>;\n};\n\nconst Container = styled.div`\n    width: 90% auto;\n    padding: 50px 10%;\n    max-width: 1000px;\n    border-left: 2px solid #f5f5f5;\n    border-right: 2px solid #f5f5f5;\n    min-height: 100vh;\n    margin: 0 auto;\n`;\nconst Heading = styled.h1`\n    font-size: 52px;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 40px;\n`;\nconst ToDoContainer = styled.div``;\nconst SubHeading = styled.h3`\n    font-size: 36px;\n    color: #050241;\n`;\nconst ToDoList = styled.ul``;\nconst ListItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 20px;\n`;\nconst LeftContainer = styled.div`\n    display: flex;\n    align-items: center;\n`;\nconst CheckContainer = styled.span`\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    border: 2px solid #050241;\n    display: inline-block;\n    margin-right: 15px;\n    cursor: pointer;\n`;\nconst ItemContent = styled.span`\n    cursor: pointer;\n    font-size: 28px;\n`;\nconst ItemRightContainer = styled.div``;\nconst ActionButton = styled.button`\n    border: none;\n    background: none;\n    cursor: pointer;\n    margin-right: 20px;\n    outline: none;\n    &:last-child{\n        margin-right: 0;\n    }\n`;\nconst ButtonImage = styled.img``;\nconst NewToDoForm = styled.form`\n    display: flex;\n    margin-left: 40px;\n    margin-top: 30px;\n    position: relative;\n    &::before{\n        content: \"\";\n        background: url(${require(\"./assets/plus.svg\").default});\n        width: 16px;\n        height: 16px;\n        display: block;\n        position: absolute;\n        left: 10px;\n        top: 0;\n        bottom: 0;\n        margin: auto 0;\n        z-index: 2;\n    }\n`;\nconst FormInput = styled.input`\n    display: block;\n    width: 100%;\n    outline: none;\n    border: 1px solid #c6c6c6;\n    padding: 0 10px 0 35px;\n    font-variant: 22px;\n`;\nconst FormSubmitButton = styled.button`\n    white-space: nowrap;\n    padding: 15px 25px;\n    border: none;\n    color: #fff;\n    background: #050241;\n    cursor: pointer;\n    border-radius: 6px;\n    border-top-left-radius:0 ;\n    border-bottom-left-radius:0 ;\n    font-size: 24px;\n`;\nconst CheckContainerCompleted = styled(CheckContainer)`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-color: #06c692;\n`;\nconst ItemContentCompleted = styled(ItemContent)`\n    color: #06c692;\n`;\nconst TickImage = styled.img``;\n\n",{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":1,"column":38,"nodeType":"31","messageId":"32","endLine":1,"endColumn":47},{"ruleId":"34","severity":1,"message":"35","line":46,"column":8,"nodeType":"36","endLine":46,"endColumn":10,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":59,"column":56,"nodeType":"40","messageId":"41","endLine":59,"endColumn":58},{"ruleId":"38","severity":1,"message":"39","line":67,"column":60,"nodeType":"40","messageId":"41","endLine":67,"endColumn":62},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'completed.length' and 'tasks.length'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setItemCount' needs the current value of 'completed.length'.","ArrayExpression",["42"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"43","fix":"44"},"Update the dependencies array to be: [completed.length, tasks.length]",{"range":"45","text":"46"},[1032,1034],"[completed.length, tasks.length]"]